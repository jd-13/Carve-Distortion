/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include "../JuceLibraryCode/JuceHeader.h"
#include "Carve.h"
#include "ParameterData.h"
#include "CoreJUCEPlugin/CoreAudioProcessor.h"
#include <memory>


//==============================================================================
/**
*/
class CarveAudioProcessor  : public WECore::JUCEPlugin::CoreAudioProcessor
{
public:
    //==============================================================================
    CarveAudioProcessor();
    ~CarveAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    bool isBusesLayoutSupported (const BusesLayout& layouts) const override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;

    //==============================================================================
    const String getName() const override;

    const String getInputChannelName (int channelIndex) const override;
    const String getOutputChannelName (int channelIndex) const override;
    bool isInputChannelStereoPair (int index) const override;
    bool isOutputChannelStereoPair (int index) const override;

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    bool silenceInProducesSilenceOut() const override;
    double getTailLengthSeconds() const override;

    //==============================================================================
    int getNumPrograms() override;
    int getCurrentProgram() override;
    void setCurrentProgram (int index) override;
    const String getProgramName (int index) override;
    void changeProgramName (int index, const String& newName) override;

    //==============================================================================
    void setStereo(bool val);

    // Parameters (public for beginChangeGesture/endChangeGesture/get)
    AudioParameterInt* mode1;
    AudioParameterFloat* preGain1;
    AudioParameterFloat* postGain1;
    AudioParameterFloat* tweak1;

    AudioParameterInt* mode2;
    AudioParameterFloat* preGain2;
    AudioParameterFloat* postGain2;
    AudioParameterFloat* tweak2;

    AudioParameterFloat* routing;
    AudioParameterBool* stereo;
    AudioParameterFloat* dryLevel;
    AudioParameterFloat* outputGain;

private:
    Carve mCarve;

    std::vector<juce::String> _provideParamNamesForMigration() override;
    void _migrateParamValues(std::vector<float>& paramValues) override;

    void _onParameterUpdate() override;

    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (CarveAudioProcessor)
};


#endif  // PLUGINPROCESSOR_H_INCLUDED
