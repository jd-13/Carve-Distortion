/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"
#include <string>


//==============================================================================
CarveAudioProcessor::CarveAudioProcessor()
{
    //Logger::outputDebugString("CarveAudioProcessor::CarveAudioProcessor");
    mCarve.DSPUnit1.setMode(MODE_DEFAULT);
    mCarve.DSPUnit1.setPreGain(TranslateParam_Inter2Norm(PREGAIN_DEFAULT, PREGAIN_MIN, PREGAIN_MAX));
    mCarve.DSPUnit1.setPostGain(TranslateParam_Inter2Norm(POSTGAIN_DEFAULT, POSTGAIN_MIN, POSTGAIN_MAX));
    mCarve.DSPUnit1.setTweak(TranslateParam_Inter2Norm(TWEAK_DEFAULT, TWEAK_MIN, TWEAK_MAX));
    
    mCarve.DSPUnit2.setMode(TranslateParam_Inter2Norm(MODE_DEFAULT, MODE_MIN, MODE_MAX));
    mCarve.DSPUnit2.setPreGain(TranslateParam_Inter2Norm(PREGAIN_DEFAULT, PREGAIN_MIN, PREGAIN_MAX));
    mCarve.DSPUnit2.setPostGain(TranslateParam_Inter2Norm(POSTGAIN_DEFAULT, POSTGAIN_MIN, POSTGAIN_MAX));
    mCarve.DSPUnit2.setTweak(TranslateParam_Inter2Norm(TWEAK_DEFAULT, TWEAK_MIN, TWEAK_MAX));
    
    mCarve.setRouting(ROUTING_DEFAULT);
    mCarve.setStereo(STEREO_DEFAULT);
    mCarve.setDryLevel(TranslateParam_Inter2Norm(DRYLEVEL_DEFAULT, DRYLEVEL_MIN, DRYLEVEL_MAX));
    mCarve.setMasterVol(TranslateParam_Inter2Norm(MASTERVOL_DEFAULT, MASTERVOL_MIN, MASTERVOL_MAX));
    
    UIUpdateFlag = true;
}

CarveAudioProcessor::~CarveAudioProcessor()
{
}

//==============================================================================
const String CarveAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int CarveAudioProcessor::getNumParameters()
{
    return totalNumParams;
}

float CarveAudioProcessor::getParameter (int index)
{
    switch (index) {
        case mode1:
            return mCarve.DSPUnit1.getMode();
            
        case preGain1:
            return TranslateParam_Inter2Norm(mCarve.DSPUnit1.getPreGain(), PREGAIN_MIN, PREGAIN_MAX);
        
        case postGain1:
            return TranslateParam_Inter2Norm(mCarve.DSPUnit1.getPostGain(), POSTGAIN_MIN, POSTGAIN_MAX);
            
        case tweak1:
            return TranslateParam_Inter2Norm(mCarve.DSPUnit1.getTweak(), TWEAK_MIN, TWEAK_MAX);
            
        
            
            
        case mode2:
            return mCarve.DSPUnit2.getMode();
            
        case preGain2:
            return TranslateParam_Inter2Norm(mCarve.DSPUnit2.getPreGain(), PREGAIN_MIN, PREGAIN_MAX);
            
        case postGain2:
            return TranslateParam_Inter2Norm(mCarve.DSPUnit2.getPostGain(), POSTGAIN_MIN, POSTGAIN_MAX);
            
        case tweak2:
            return TranslateParam_Inter2Norm(mCarve.DSPUnit2.getTweak(), TWEAK_MIN, TWEAK_MAX);
            
            
            
            
        case routing:
            return TranslateParam_Inter2Norm(mCarve.getRouting(), ROUTING_SERIAL, ROUTING_PARALLEL);
            
        case stereo:
            return mCarve.getStereo();
            
        case dryLevel:
            return TranslateParam_Inter2Norm(mCarve.getDryLevel(), DRYLEVEL_MIN, DRYLEVEL_MAX);
            
        case masterVol:
            return TranslateParam_Inter2Norm(mCarve.getMasterVol(), MASTERVOL_MIN, MASTERVOL_MAX);
            
            
            
        default:
            return 0.0f;
    }
}

void CarveAudioProcessor::setParameter (int index, float newValue)
{
    switch (index) {
        case mode1:
            mCarve.DSPUnit1.setMode(round(newValue));
            break;
            
        case preGain1:
            mCarve.DSPUnit1.setPreGain(TranslateParam_Norm2Inter(newValue, PREGAIN_MIN, PREGAIN_MAX));
            break;
            
        case postGain1:
            mCarve.DSPUnit1.setPostGain(TranslateParam_Norm2Inter(newValue, POSTGAIN_MIN, POSTGAIN_MAX));
            break;
            
        case tweak1:
            mCarve.DSPUnit1.setTweak(TranslateParam_Norm2Inter(newValue, TWEAK_MIN, TWEAK_MAX));
            break;
            
            
            
            
        case mode2:
            mCarve.DSPUnit2.setMode(round(newValue));
            break;
            
        case preGain2:
            mCarve.DSPUnit2.setPreGain(TranslateParam_Norm2Inter(newValue, PREGAIN_MIN, PREGAIN_MAX));
            break;
            
        case postGain2:
            mCarve.DSPUnit2.setPostGain(TranslateParam_Norm2Inter(newValue, POSTGAIN_MIN, POSTGAIN_MAX));
            break;
            
        case tweak2:
            mCarve.DSPUnit2.setTweak(TranslateParam_Norm2Inter(newValue, TWEAK_MIN, TWEAK_MAX));
            break;
            
            
            
            
        case routing:
            mCarve.setRouting(TranslateParam_Norm2Inter(newValue, ROUTING_SERIAL, ROUTING_PARALLEL));
            break;
            
        case stereo:
            mCarve.setStereo(newValue < 0.5 ? true : false);
            break;
            
        case dryLevel:
            mCarve.setDryLevel(TranslateParam_Norm2Inter(newValue, DRYLEVEL_MIN, DRYLEVEL_MAX));
            break;
            
        case masterVol:
            mCarve.setMasterVol(TranslateParam_Norm2Inter(newValue, MASTERVOL_MIN, MASTERVOL_MAX));
            break;
            
            
            
            
        default:
            break;
    }
    
    UIUpdateFlag = true;
}

const String CarveAudioProcessor::getParameterName (int index)
{
    switch (index) {
        case mode1:
            return MODE1_STR;
            
        case preGain1:
            return PREGAIN1_STR;
            
        case postGain1:
            return POSTGAIN1_STR;
            
        case tweak1:
            return TWEAK1_STR;
            
            
            
            
        case mode2:
            return MODE2_STR;
            
        case preGain2:
            return PREGAIN2_STR;
            
        case postGain2:
            return POSTGAIN2_STR;
            
        case tweak2:
            return TWEAK2_STR;
            
            
            
            
        case routing:
            return ROUTING_STR;
            
        case stereo:
            return STEREO_STR;
            
        case dryLevel:
            return DRYLEVEL_STR;
            
        case masterVol:
            return MASTERVOL_STR;
            
            
            
            
        default:
            return String::empty;
    }
}

const String CarveAudioProcessor::getParameterText (int index)
{
    switch (index) {
        case mode1:
            return String(mCarve.DSPUnit1.getMode());
            
        case preGain1:
            return String(TranslateParam_Inter2Norm(mCarve.DSPUnit1.getPreGain(), PREGAIN_MIN, PREGAIN_MAX));
            
        case postGain1:
            return String(TranslateParam_Inter2Norm(mCarve.DSPUnit1.getPostGain(), POSTGAIN_MIN, POSTGAIN_MAX));
            
        case tweak1:
            return String(TranslateParam_Inter2Norm(mCarve.DSPUnit1.getTweak(), TWEAK_MIN, TWEAK_MAX));
            
            
            
            
        case mode2:
            return String(mCarve.DSPUnit2.getMode());
            
        case preGain2:
            return String(TranslateParam_Inter2Norm(mCarve.DSPUnit2.getPreGain(), PREGAIN_MIN, PREGAIN_MAX));
            
        case postGain2:
            return String(TranslateParam_Inter2Norm(mCarve.DSPUnit2.getPostGain(), POSTGAIN_MIN, POSTGAIN_MAX));
            
        case tweak2:
            return String(TranslateParam_Inter2Norm(mCarve.DSPUnit2.getTweak(), TWEAK_MIN, TWEAK_MAX));
            
        
            
            
        case routing:
            return String(TranslateParam_Inter2Norm(mCarve.getRouting(), ROUTING_SERIAL, ROUTING_PARALLEL));
            
        case stereo:
            return String(mCarve.getStereo());
            
        case dryLevel:
            return String(TranslateParam_Inter2Norm(mCarve.getDryLevel(), DRYLEVEL_MIN, DRYLEVEL_MAX));
            
        case masterVol:
            return String(TranslateParam_Inter2Norm(mCarve.getMasterVol(), MASTERVOL_MIN, MASTERVOL_MAX));
            
            
            
            
        default:
            return String::empty;
    }
}

bool CarveAudioProcessor::isParameterAutomatable(int parameterIndex) const {
    switch (parameterIndex) {
        case mode1:
            return false;
            
        case mode2:
            return false;
            
        default:
            return true;
    }
}


const String CarveAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String CarveAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool CarveAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool CarveAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool CarveAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool CarveAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool CarveAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double CarveAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int CarveAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int CarveAudioProcessor::getCurrentProgram()
{
    return 0;
}

void CarveAudioProcessor::setCurrentProgram (int index)
{
}

const String CarveAudioProcessor::getProgramName (int index)
{
    return String();
}

void CarveAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void CarveAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void CarveAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void CarveAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i) {
        buffer.clear (i, 0, buffer.getNumSamples());
    }

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    if (getNumOutputChannels() == 1 && getNumOutputChannels() == 1) {
        float* inSample = buffer.getWritePointer(0);
        
        for (long iii = 0; iii < buffer.getNumSamples(); iii++) {
            mCarve.ClockProcess1in1out(&inSample[iii]);
        }
    } else if (getNumInputChannels() == 1 && getNumOutputChannels() == 2) {
        float* inLeftSample = buffer.getWritePointer(0);
        float* inRightSample = buffer.getWritePointer(1);
        
        for (long iii = 0; iii < buffer.getNumSamples(); iii++) {
            mCarve.ClockProcess1in2out(&inLeftSample[iii], &inRightSample[iii]);
        }
        
    } else {
        float* inLeftSample = buffer.getWritePointer(0);
        float* inRightSample = buffer.getWritePointer(1);
        
        for (long iii = 0; iii < buffer.getNumSamples(); iii++) {
            mCarve.ClockProcess2in2out(&inLeftSample[iii], &inRightSample[iii]);
        }
    }
}

//==============================================================================
bool CarveAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* CarveAudioProcessor::createEditor()
{
    return new CarveAudioProcessorEditor (*this);
}

//==============================================================================
void CarveAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
    XmlElement root("Root");
    XmlElement *el;
    
    el = root.createNewChildElement(MODE1_STR);
    el->addTextElement(String(mCarve.DSPUnit1.getMode()));
    
    el = root.createNewChildElement(PREGAIN1_STR);
    el->addTextElement(String(mCarve.DSPUnit1.getPreGain()));
    
    el = root.createNewChildElement(POSTGAIN1_STR);
    el->addTextElement(String(mCarve.DSPUnit1.getPostGain()));
    
    el = root.createNewChildElement(TWEAK1_STR);
    el->addTextElement(String(mCarve.DSPUnit1.getTweak()));
    
    
    
    
    el = root.createNewChildElement(MODE2_STR);
    el->addTextElement(String(mCarve.DSPUnit2.getMode()));
    
    el = root.createNewChildElement(PREGAIN2_STR);
    el->addTextElement(String(mCarve.DSPUnit2.getPreGain()));
    
    el = root.createNewChildElement(POSTGAIN2_STR);
    el->addTextElement(String(mCarve.DSPUnit2.getPostGain()));
    
    el = root.createNewChildElement(TWEAK2_STR);
    el->addTextElement(String(mCarve.DSPUnit2.getTweak()));
    
    
    
    
    el = root.createNewChildElement(ROUTING_STR);
    el->addTextElement(String(mCarve.getRouting()));
    
    el = root.createNewChildElement(STEREO_STR);
    el->addTextElement(String(mCarve.getStereo()));
    
    el = root.createNewChildElement(DRYLEVEL_STR);
    el->addTextElement(String(mCarve.getDryLevel()));
    
    el = root.createNewChildElement(MASTERVOL_STR);
    el->addTextElement(String(mCarve.getMasterVol()));
    
    
    
    
    copyXmlToBinary(root, destData);

}

void CarveAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
    XmlElement* pRoot = getXmlFromBinary(data, sizeInBytes);

    if (pRoot != NULL) {
        forEachXmlChildElement((*pRoot), pChild) {
            if (pChild->hasTagName(MODE1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(mode1, text.getFloatValue());
            } else if (pChild->hasTagName(PREGAIN1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(preGain1, text.getFloatValue());
            } else if (pChild->hasTagName(POSTGAIN1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(postGain1, text.getFloatValue());
            } else if (pChild->hasTagName(TWEAK1_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tweak1, text.getFloatValue());
            }
            
            
            
            
            else if (pChild->hasTagName(MODE2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(mode2, text.getFloatValue());
            } else if (pChild->hasTagName(PREGAIN2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(preGain2, text.getFloatValue());
            } else if (pChild->hasTagName(POSTGAIN2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(postGain2, text.getFloatValue());
            } else if (pChild->hasTagName(TWEAK2_STR)) {
                String text = pChild->getAllSubText();
                setParameter(tweak2, text.getFloatValue());
            }
            
            
            
            
            else if (pChild->hasTagName(ROUTING_STR)) {
                String text = pChild->getAllSubText();
                setParameter(routing, text.getFloatValue());
            } else if (pChild->hasTagName(STEREO_STR)) {
                String text = pChild->getAllSubText();
                setParameter(stereo, text.getFloatValue());
            } else if (pChild->hasTagName(DRYLEVEL_STR)) {
                String text = pChild->getAllSubText();
                setParameter(dryLevel, text.getFloatValue());
            } else if (pChild->hasTagName(MASTERVOL_STR)) {
                String text = pChild->getAllSubText();
                setParameter(masterVol, text.getFloatValue());
            }
        }
        
        delete pRoot;
        pRoot = NULL;
        UIUpdateFlag = true;
    }

}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new CarveAudioProcessor();
}
