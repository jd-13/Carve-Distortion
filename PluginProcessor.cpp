/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
CarveAudioProcessor::CarveAudioProcessor()
{
    //Logger::outputDebugString("CarveAudioProcessor::CarveAudioProcessor");
    UserParams[mode1] = MODE_DEFAULT;
    UserParams[preGain1] = PREGAIN_DEFAULT;
    UserParams[postGain1] = POSTGAIN_DEFAULT;
    UserParams[tweak1] = TWEAK_DEFAULT;
    
    mCarve.DSPUnit1.setMode(UserParams[mode1]);
    mCarve.DSPUnit1.setPreGain(UserParams[preGain1]);
    mCarve.DSPUnit1.setPostGain(UserParams[postGain1]);
    mCarve.DSPUnit1.setTweak(UserParams[tweak1]);
    
    UIUpdateFlag = true;
}

CarveAudioProcessor::~CarveAudioProcessor()
{
}

//==============================================================================
const String CarveAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int CarveAudioProcessor::getNumParameters()
{
    return totalNumParams;
}

float CarveAudioProcessor::getParameter (int index)
{
    switch (index) {
        case mode1:
            UserParams[mode1] = mCarve.DSPUnit1.getMode();
            return UserParams[mode1];
            
        case preGain1:
            UserParams[preGain1] = mCarve.DSPUnit1.getPreGain();
            return UserParams[preGain1];
        
        case postGain1:
            UserParams[postGain1] = mCarve.DSPUnit1.getPostGain();
            return UserParams[postGain1];
            
        case tweak1:
            UserParams[tweak1] = mCarve.DSPUnit1.getTweak();
            return UserParams[tweak1];
            
        default:
            return 0.0f;
    }
}

void CarveAudioProcessor::setParameter (int index, float newValue)
{
    switch (index) {
        case mode1:
            UserParams[mode1] = newValue;
            mCarve.DSPUnit1.setMode(UserParams[mode1]); // TODO: rounding?
            break;
            
        case preGain1:
            UserParams[preGain1] = newValue;
            mCarve.DSPUnit1.setPreGain(UserParams[preGain1]);
            break;
            
        case postGain1:
            UserParams[postGain1] = newValue;
            mCarve.DSPUnit1.setPostGain(UserParams[postGain1]);
            break;
            
        case tweak1:
            UserParams[tweak1] = newValue;
            mCarve.DSPUnit1.setTweak(UserParams[tweak1]);
            break;
            
        default:
            return;
    }
    
    UIUpdateFlag = true;
}

const String CarveAudioProcessor::getParameterName (int index)
{
    switch (index)
    {
        case mode1:
            return MODE_STR;
            
        case preGain1:
            return PREGAIN_STR;
            
        case postGain1:
            return POSTGAIN_STR;
            
        case tweak1:
            return TWEAK_STR;
            
        default:
            return String::empty;
    }
}

const String CarveAudioProcessor::getParameterText (int index)
{
    if (index >= 0 && index < totalNumParams) {
        return String(UserParams[index]);
    } else {
        return String::empty;
    }
}

const String CarveAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String CarveAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool CarveAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool CarveAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool CarveAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool CarveAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool CarveAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double CarveAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int CarveAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int CarveAudioProcessor::getCurrentProgram()
{
    return 0;
}

void CarveAudioProcessor::setCurrentProgram (int index)
{
}

const String CarveAudioProcessor::getProgramName (int index)
{
    return String();
}

void CarveAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void CarveAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void CarveAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void CarveAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i) {
        buffer.clear (i, 0, buffer.getNumSamples());
    }

    // This is the place where you'd normally do the guts of your plugin's
    // audio processing...
    float* leftSample = buffer.getWritePointer(0);
    float* rightSample = buffer.getWritePointer(1);
    
    for (long iii = 0; iii < buffer.getNumSamples(); iii++) {
        mCarve.ClockProcess(&leftSample[iii], &rightSample[iii]);
    }
}

//==============================================================================
bool CarveAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* CarveAudioProcessor::createEditor()
{
    return new CarveAudioProcessorEditor (*this);
}

//==============================================================================
void CarveAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
    XmlElement root("Root");
    XmlElement *el;
    
    el = root.createNewChildElement("mode1");
    el->addTextElement(String(UserParams[mode1]));
    
    el = root.createNewChildElement("preGain1");
    el->addTextElement(String(UserParams[preGain1]));
    
    el = root.createNewChildElement("postGain1");
    el->addTextElement(String(UserParams[postGain1]));
    
    el = root.createNewChildElement("tweak1");
    el->addTextElement(String(UserParams[tweak1]));
    
    copyXmlToBinary(root, destData);

}

void CarveAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
    XmlElement* pRoot = getXmlFromBinary(data, sizeInBytes);

    if (pRoot != NULL) {
        forEachXmlChildElement((*pRoot), pChild) {
            if (pChild->hasTagName("mode1")) {
                String text = pChild->getAllSubText();
                setParameter(mode1, text.getFloatValue());
            } else if (pChild->hasTagName("preGain1")) {
                String text = pChild->getAllSubText();
                setParameter(preGain1, text.getFloatValue());
            } else if (pChild->hasTagName("postGain1")) {
                String text = pChild->getAllSubText();
                setParameter(postGain1, text.getFloatValue());
            } else if (pChild->hasTagName("tweak1")) {
                String text = pChild->getAllSubText();
                setParameter(tweak1, text.getFloatValue());
            }
        }
        
        delete pRoot;
        pRoot = NULL;
        UIUpdateFlag = true;
    }

}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new CarveAudioProcessor();
}
